// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetClinic.Data;

#nullable disable

namespace PetClinic.Migrations
{
    [DbContext(typeof(PetClinicContext))]
    [Migration("20250727222822_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("PetClinic.Models.Owner", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("city");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.HasIndex("LastName")
                        .HasDatabaseName("owners_last_name");

                    b.ToTable("owners");
                });

            modelBuilder.Entity("PetClinic.Models.Pet", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("owner_id");

                    b.Property<int?>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TypeId");

                    b.ToTable("pets");
                });

            modelBuilder.Entity("PetClinic.Models.PetType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("types_name");

                    b.ToTable("types");
                });

            modelBuilder.Entity("PetClinic.Models.Specialty", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("specialties_name");

                    b.ToTable("specialties");
                });

            modelBuilder.Entity("PetClinic.Models.Vet", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("last_name");

                    b.HasKey("Id");

                    b.HasIndex("LastName")
                        .HasDatabaseName("vets_last_name");

                    b.ToTable("vets");
                });

            modelBuilder.Entity("PetClinic.Models.Visit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("visit_date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PetId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pet_id");

                    b.HasKey("Id");

                    b.HasIndex("PetId");

                    b.ToTable("visits");
                });

            modelBuilder.Entity("vet_specialties", b =>
                {
                    b.Property<int>("specialty_id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("vet_id")
                        .HasColumnType("INTEGER");

                    b.HasKey("specialty_id", "vet_id");

                    b.HasIndex("vet_id");

                    b.ToTable("vet_specialties");
                });

            modelBuilder.Entity("PetClinic.Models.Pet", b =>
                {
                    b.HasOne("PetClinic.Models.Owner", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PetClinic.Models.PetType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Owner");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("PetClinic.Models.Visit", b =>
                {
                    b.HasOne("PetClinic.Models.Pet", "Pet")
                        .WithMany("Visits")
                        .HasForeignKey("PetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Pet");
                });

            modelBuilder.Entity("vet_specialties", b =>
                {
                    b.HasOne("PetClinic.Models.Specialty", null)
                        .WithMany()
                        .HasForeignKey("specialty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetClinic.Models.Vet", null)
                        .WithMany()
                        .HasForeignKey("vet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetClinic.Models.Owner", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetClinic.Models.Pet", b =>
                {
                    b.Navigation("Visits");
                });
#pragma warning restore 612, 618
        }
    }
}
